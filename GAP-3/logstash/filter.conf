filter {
    if [type] == "nginx_access" {
        grok {
            match => { "message" => "%{IPORHOST:remote_ip} - %{DATA:user} \[%{HTTPDATE:access_time}\] \"%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:body_sent_bytes} \"%{DATA:referrer}\" \"%{DATA:agent}\"" }
        }
    }
    date {
        match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
    }
    geoip {
         source => "remote_ip"
         target => "geoip"
         add_tag => [ "nginx-geoip" ]
    }

   if [type] == "rsyslog" {
	elasticsearch {
	hosts => [ "127.0.0.1:9200" ] }
    }
 
   if [type] == "syslog" {
        dns {
            reverse => [ "host" ]
            action => "replace"
        }
        mutate {
            add_tag => [ "syslog" ]
            }
        }
        
   if [type] == "syslog" {
        grok {
            match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp}         %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
            add_field => [ "received_at", "%{@timestamp}" ]
            add_field => [ "received_from", "%{host}" ]
            }
            syslog_pri { }
            date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601" ]
            }
        }

    if "syslog" in [tags] {
        grok {
                match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
                add_field => [ "received_at", "%{@timestamp}" ]
                add_field => [ "received_from", "%{host}" ]
            }
        syslog_pri { }
        date {
            match => [ "syslog_timestamp", "MMM d HH:mm:ss", "MMM dd HH:mm:ss" ]
            }
            if !("_grokparsefailure" in [tags]) {
                mutate {
                        replace => [ "host", "%{syslog_hostname}" ]
                        replace => [ "@source_host", "%{syslog_hostname}" ]
                        replace => [ "@message", "%{syslog_message}" ]
                        }
                }
        }
    if "syslog" in [tags] {
        if [syslog_program] == "sshd" {
            if "Failed password" in [message] {
                grok {
                    break_on_match => false
                    match => [
                            "message", "invalid user %{DATA:UserName} from %{IP:src_ip}",
                            "message", "for %{DATA:UserName} from %{IP:src_ip}"
                            ]
                        }
                mutate {
                    add_tag => [ "SSH_Failed_Login" ]
                        }
                    }
            if "Accepted password" in [message] {
                grok {
                    match => [
                            "message", "for %{DATA:UserName} from %{IP:src_ip}"
                            ]
                        }
                mutate {
                    add_tag => [ "SSH_Successful_Login" ]
                    }
                }
                geoip {
                    source => "src_ip"
                    target => "geoip"
                    add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                    add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
                }
                mutate {
                    convert => [ "[geoip][coordinates]", "float" ]
                    }
        }
    }
}
